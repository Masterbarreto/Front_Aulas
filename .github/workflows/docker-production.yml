name: Sub_Aulas Docker Build & Deploy

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Definir o nome da imagem
  IMAGE_NAME: sub-aulas-frontend

jobs:
  build-and-test:
    name: Build & Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: npm run lint
      continue-on-error: true
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Login to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔑 Login to Docker Hub (opcional)
      if: github.event_name != 'pull_request' && secrets.DOCKERHUB_USERNAME != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🧪 Test Docker image
      run: |
        docker run --rm -d --name test-sub-aulas -p 5173:5173 \
          ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        sleep 15
        curl -f http://localhost:5173 || exit 1
        docker stop test-sub-aulas

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'

  deploy-notification:
    name: 📢 Deploy Notification
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🚀 Deployment ready
      run: |
        echo "🎉 Docker image built successfully!"
        echo "📦 Image: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
        echo "🔗 Pull command: docker pull ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
        echo "🚀 Ready for deployment!"
